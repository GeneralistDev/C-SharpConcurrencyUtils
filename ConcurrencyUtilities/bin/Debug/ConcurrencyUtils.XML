<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConcurrencyUtils</name>
    </assembly>
    <members>
        <member name="T:ConcurrencyUtils.ActiveObject">
            <summary>
            Active (threaded) object class. Subclass and override 'Execute()' to use.
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ActiveObject.#ctor">
            <summary>
            Public constructor that creates a Thread
            object with the 'Execute' method as parameter.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ActiveObject.Start">
            <summary>
            Use this method to start the active object's processing.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ActiveObject.Execute">
            <summary>
            Execute active object logic. Subclass and override this method.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ActiveObject.Stop">
            <summary>
            Stop the active object by interrupting it.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.Barrier">
            <summary>
            	Concurrency Barrier. Threads rendezvous until the size of the barrier is
            	reached and the last one opens the barrier to allow them all to continue.
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="F:ConcurrencyUtils.Barrier.ReleaseSemaphore">
            <summary>
            Semaphore that will be signalled when the barrier is full.
            </summary>
        </member>
        <member name="F:ConcurrencyUtils.Barrier.TS">
            <summary>
            Turnstile to control the arrival of threads to the barrier.
            </summary>
        </member>
        <member name="F:ConcurrencyUtils.Barrier.barrierSize">
            <summary>
            The number of threads that needs to be reached
            before all the waiting threads are released.
            </summary>
        </member>
        <member name="F:ConcurrencyUtils.Barrier.count">
            <summary>
            The current number of threads in the barrier.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Barrier.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <param name="barrierStartSize">Barrier start size.</param>
        </member>
        <member name="M:ConcurrencyUtils.Barrier.Arrive">
            <summary>
            Arrive at the barrier. When the barrier is full all threads continue.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.BoundChannel`1">
            <summary>
            	Bound channel. Inherits from the ADT ConcurrencyUtils.Channel class.
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.BoundChannel`1.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of this class
            with a maximum size for the channel.
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:ConcurrencyUtils.BoundChannel`1.Put(`0)">
            <summary>
            Put the specified item into the Channel if there is space, will wait
            on Acquire() if there isn't.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:ConcurrencyUtils.BoundChannel`1.Take">
            <summary>
            Take an item from the Channel and release token
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.Channel`1">
            <summary>
            	The Abstract Data Type Channel (concurrent queue)
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Channel`1.#ctor">
            <summary>
            Initializes a new instance of this class
            by creating an abstract Queue and zero token Semaphore.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Channel`1.Put(`0)">
            <summary>
            Put the specified item into the Channel.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:ConcurrencyUtils.Channel`1.Take">
            <summary>
            Take an item from the Channel
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.InputChannelActiveObject`1">
            <summary>
            Channel-based active object that takes data from its
            input channel and processes it.
            	Author: Daniel Parker 971328X
            </summary>
            <typeparam name="IT">The type of data on the input channel.</typeparam>
        </member>
        <member name="F:ConcurrencyUtils.InputChannelActiveObject`1.inputChannel">
            <summary>
            Input channel that this active object will read data
            from to process.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.InputChannelActiveObject`1.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.InputChannelActiveObject`1.Execute">
            <summary>
            Loops forever taking data off the input channel calling the 'Process' method.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.InputChannelActiveObject`1.Process(`0)">
            <summary>
            Process a given unit of data. Must be implemented by subclass.
            </summary>
            <param name="data">The data unit to process.</param>
        </member>
        <member name="T:ConcurrencyUtils.InputOutputChannelActiveObject`2">
            <summary>
            Channel-based active object which takes data from it's input channel,
            executes some processing (must be implemented by subclass) and places
            the result on it's output channel.
            	Author: Daniel Parker 971328X
            </summary>
            <typeparam name="IT">The type of data on the input channel.</typeparam>
            <typeparam name="OT">The type of data on the output channel.</typeparam>
        </member>
        <member name="F:ConcurrencyUtils.InputOutputChannelActiveObject`2.inputChannel">
            <summary>
            The input channel for this active object. Data will
            be taken off this channel and processed by the active object.
            </summary>
        </member>
        <member name="F:ConcurrencyUtils.InputOutputChannelActiveObject`2.outputChannel">
            <summary>
            The output channel for this active object. Results of processing
            will be placed on this channel.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.InputOutputChannelActiveObject`2.#ctor">
            <summary>
            Public construtor.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.InputOutputChannelActiveObject`2.Execute">
            <summary>
            Loops forever and processing the input channel data, placing
            the results on the output channel.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.InputOutputChannelActiveObject`2.Process(`0)">
            <summary>
            Process method must be implemented by subclass.
            </summary>
            <param name="data">The data unit to process.</param>
            <returns>The result of processing the input data unit.</returns>
        </member>
        <member name="T:ConcurrencyUtils.OutputChannelActiveObject`1">
            <summary>
            Channel-based active object that runs some process and places the data on
            its output channel.
            	Author: Daniel Parker 971328X
            </summary>
            <typeparam name="OT">The type of data on the output channel.</typeparam>
        </member>
        <member name="F:ConcurrencyUtils.OutputChannelActiveObject`1.outputChannel">
            <summary>
            The channel that this active object will place
            the results of processing onto.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.OutputChannelActiveObject`1.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.OutputChannelActiveObject`1.Execute">
            <summary>
            Loops forever putting the result of the 'Process' method on
            this active object's output channel.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.OutputChannelActiveObject`1.Process">
            <summary>
            Run a process and return the result of the process.
            Must be implemented by subclass.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:ConcurrencyUtils.FIFOSemaphore">
            <summary>
            First in first out Semaphore. A semaphore that retains
            	order of acquires so as to avoid starvation of threads.
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.FIFOSemaphore.#ctor(System.UInt64)">
            <summary>
            Public constructor that calls the internal 'Release'
            method to correctly add tokens to the semaphore.
            </summary>
            <param name="n">
            </param>
        </member>
        <member name="M:ConcurrencyUtils.FIFOSemaphore.Acquire">
            <summary>
            The acquiring thread creates a semaphore of it's own and adds it to the queue.
            The thread then tries to acquire from that semaphore. Once acquired, the thread can acquire a token.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.FIFOSemaphore.Release(System.UInt64)">
            <summary>
            Release n tokens. If there are threads waiting, then dequeue and signal them in order.
            </summary>
            <param name="n">The number of tokens to release.</param>
        </member>
        <member name="T:ConcurrencyUtils.Latch">
            <summary>
            	Concurrency Latch utility.
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Latch.#ctor">
            <summary>
            	Initializes a new instance of the
            		<see cref="T:ConcurrencyUtils.Latch" /> class.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Latch.Acquire">
            <summary>
            	Acquire the latch.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Latch.Release">
            <summary>
            	Release the latch.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.LightSwitch">
            <summary>
            	Concurrency Light switch utility.
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.LightSwitch.#ctor(ConcurrencyUtils.Semaphore)">
            <summary>
            	Initializes a new instance of the
            		<see cref="T:ConcurrencyUtils.LightSwitch" /> class.
            </summary>
            <param name="s">S.</param>
        </member>
        <member name="M:ConcurrencyUtils.LightSwitch.Acquire">
            <summary>
            	Acquire the Lightswitch.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.LightSwitch.Release">
            <summary>
            		Release the Lightswitch.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.Mutex">
            <summary>
            The mutex (single token semaphore) class which inherits from
            		ConcurrencyUtils.Semaphore
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Mutex.#ctor">
            <summary>
            Calls Semaphore constructor with single token
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Mutex.Release(System.UInt64)">
            <summary>
            Overidding Release method which throws an argument error if
            		either more than one token is being released or if the total
            		tokens is already larger than 0.
            </summary>
            <param name="n">
            </param>
        </member>
        <member name="T:ConcurrencyUtils.ReaderWriterLock">
            <summary>
            	Concurrency utility that allows multiple reading threads
            	to access a resource, but when a writing thread needs access
            	only that single thread can hold the resource access permission.
            	No other readers or writers can access the reasource.
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.#ctor">
            <summary>
            	Public constructor.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.ReaderAcquire">
            <summary>
            	Acquire permission to read. Many readers can get through this concurrently.
            	This will block if a writer has access to the resource.
            	Details: Reading threads will pass through a reader turnstile after which they will
            	increment the number of readers currently in the reader-writer lock. Then the
            	reading thread will acquire the 'readers' lightswitch. On exit the thread will
            	remove itself from the number of readers and pulse the lockObject where any
            	writers will be waiting to check if there are no longer readers in the lock.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.WriterAcquire">
            <summary>
            	Acquire permission to write. Only one thread can access the locked
            	resource at a time when that thread wants to write.
            	Details: Writer will acquire the reader turnstile to block any new
            	reader threads for the time being. It will also acquire the writer
            	turnstile to stop any new writers entering, and then attempt to
            	acquire the main reader-writer lock. This will wait until any
            	remaining readers in the lightswitch complete their read operations.
            	The final operation is to release the writer turnstile and allow a
            	pending writer to queue up. (New readers are still blocked at this stage)
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.ReaderRelease">
            <summary>
            	Readers only have to release to the lightswitch to announce their completion.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.WriterRelease">
            <summary>
            	Release writer lock.
            	Details: The main reader-writer lock is released, which may result in some lagging readers
            	to acquire the lightswitch and run read operations. The writer will wait for
            	the number of readers to reach zero and then release the reader turnstile to effectively
            	give any waiting readers or writers an equal chance of getting read/write permission.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.Semaphore">
            <summary>
            The semaphore class from which other concurrency utilities are derived.
            	Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="F:ConcurrencyUtils.Semaphore.tokens">
            <summary>
            The number of tokens available in the semaphore.
            </summary>
        </member>
        <member name="F:ConcurrencyUtils.Semaphore.lockObject">
            <summary>
            Object to lock when intending to read or write the 'tokens' variable.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Semaphore.#ctor(System.UInt64)">
            <summary>
            Constructor taking an optional initial token amount. Default is 0 tokens
            </summary>
            <param name="nTokens">
            </param>
        </member>
        <member name="M:ConcurrencyUtils.Semaphore.Acquire">
            <summary>
            Acquire a token from the semaphore. Threads will wait if none available
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Semaphore.Release(System.UInt64)">
            <summary>
            Release a number of tokens to the semaphore (default 1) and pulse threads waiting at Acquire()
            </summary>
            <param name="n">
            </param>
        </member>
        <member name="T:ConcurrencyUtils.Exchanger`1">
            <summary>
            	A concurrency utility to facilitate the exchange of two
            	objects of type T between two threads 'a' and 'b'.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Exchanger`1.#ctor">
            <summary>
            	Public constructor.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Exchanger`1.Exchange(`0)">
            <summary>
            	Thread exchange method.
            </summary>
            <returns>Other thread's object</returns>
            <param name="object1">Object to give to thread 'b'.</param>
        </member>
    </members>
</doc>
