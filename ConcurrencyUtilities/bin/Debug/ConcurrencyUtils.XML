<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConcurrencyUtils</name>
    </assembly>
    <members>
        <member name="T:ConcurrencyUtils.Barrier">
            <summary>
            Concurrency Barrier. Threads rendezvous until the size of the barrier is
            reached and the last one opens the barrier to allow them all to continue.
            
            Author: Daniel Parker 971328X
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Barrier.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ConcurrencyUtils.Barrier"/> class.
            </summary>
            <param name="barrierStartSize">Barrier start size.</param>
        </member>
        <member name="M:ConcurrencyUtils.Barrier.Arrive">
            <summary>
            Arrive at the barrier. When the barrier is full all threads continue.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.BoundChannel`1">
            <summary>
            Bound channel. Inherits from the ADT ConcurrencyUtils.Channel class
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.Channel`1">
            <summary>
            The Abstract Data Type Channel (concurrent queue)
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Channel`1.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="!:ConcurrencyUtils.Channel`1"/> class
            by creating an abstract Queue and zero token Semaphore.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Channel`1.Put(`0)">
            <summary>
            Put the specified item into the Channel.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:ConcurrencyUtils.Channel`1.Take">
            <summary>
            Take an item from the Channel
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.BoundChannel`1.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the 
            <see cref="!:ConcurrencyUtils.BoundChannel`1"/> class
            with a maximum size for the channel.
            </summary>
            <param name="size">Size.</param>
        </member>
        <member name="M:ConcurrencyUtils.BoundChannel`1.Put(`0)">
            <summary>
            Put the specified item into the Channel if there is space, will wait
            on Acquire() if there isn't.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:ConcurrencyUtils.BoundChannel`1.Take">
            <summary>
            Take an item from the Channel and release token
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.FIFOSemaphore">
            <summary>
                First in first out Semaphore. A semaphore that retains order of acquires so as to avoid starvation of threads.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.Semaphore">
            <summary>
                The semaphore class from which other concurrency utilities are derived.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Semaphore.#ctor(System.UInt64)">
            <summary>
                Constructor taking an optional initial token amount. Default is 0 tokens
            </summary>
            <param name="nTokens"></param>
        </member>
        <member name="M:ConcurrencyUtils.Semaphore.Acquire">
            <summary>
                Acquire a token from the semaphore. Threads will wait if none available 
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Semaphore.Release(System.UInt64)">
            <summary>
                Release a number of tokens to the semaphore (default 1) and pulse threads waiting at Acquire()
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:ConcurrencyUtils.FIFOSemaphore.Acquire">
            <summary>
                The acquiring thread creates a semaphore of it's own and adds it to the queue. 
                The thread then tries to acquire from that semaphore. Once acquired, the thread can acquire a token.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.FIFOSemaphore.Release(System.UInt64)">
            <summary>
                Release n tokens. If there are threads waiting, then dequeue and signal them in order.
            </summary>
            <param name="n">The number of tokens to release.</param>
        </member>
        <member name="T:ConcurrencyUtils.Latch">
            <summary>
            	Concurrency Latch utility.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Latch.#ctor">
            <summary>
            	Initializes a new instance of the 
            	<see cref="T:ConcurrencyUtils.Latch"/> class.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Latch.Acquire">
            <summary>
            	Acquire the latch.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Latch.Release">
            <summary>
            	Release the latch.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.LightSwitch">
            <summary>
            	Concurrency Light switch utility.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.LightSwitch.#ctor(ConcurrencyUtils.Semaphore)">
            <summary>
            	Initializes a new instance of the 
            	<see cref="T:ConcurrencyUtils.LightSwitch"/> class.
            </summary>
            <param name="s">S.</param>
        </member>
        <member name="M:ConcurrencyUtils.LightSwitch.Acquire">
            <summary>
            	Acquire the Lightswitch.
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.LightSwitch.Release">
            <summary>
            	Release the Lightswitch.
            </summary>
        </member>
        <member name="T:ConcurrencyUtils.Mutex">
            <summary>
                The mutex (single token semaphore) class which inherits from 
            	ConcurrencyUtils.Semaphore
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Mutex.#ctor">
            <summary>
                Calls Semaphore constructor with single token
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.Mutex.Release(System.UInt64)">
            <summary>
                Overidding Release method which throws an argument error if
            	either more than one token is being released or if the total 
            	tokens is already larger than 0.
            </summary>
            <param name="n"></param>
        </member>
        <member name="T:ConcurrencyUtils.ReaderWriterLock">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.ReaderAcquire">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.WriterAcquire">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.ReaderRelease">
            <summary>
            
            </summary>
        </member>
        <member name="M:ConcurrencyUtils.ReaderWriterLock.WriterRelease">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
